Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> FORMAT_HEX expression
Rule 2     statement -> FORMAT_BIN expression
Rule 3     statement -> ID EQUALS expression
Rule 4     statement -> expression
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> MINUS expression
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    number -> DEC
Rule 12    number -> HEX
Rule 13    number -> BIN
Rule 14    expression -> number
Rule 15    expression -> ID

Terminals, with rules where they appear

BIN                  : 13
DEC                  : 11
DIVIDE               : 8
EQUALS               : 3
FORMAT_BIN           : 2
FORMAT_HEX           : 1
HEX                  : 12
ID                   : 3 15
LPAREN               : 10
MINUS                : 6 9
PLUS                 : 5
RPAREN               : 10
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 5 5 6 6 7 7 8 8 9 10
number               : 14
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . FORMAT_HEX expression
    (2) statement -> . FORMAT_BIN expression
    (3) statement -> . ID EQUALS expression
    (4) statement -> . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    FORMAT_HEX      shift and go to state 2
    FORMAT_BIN      shift and go to state 4
    ID              shift and go to state 5
    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    statement                      shift and go to state 1
    expression                     shift and go to state 3
    number                         shift and go to state 8

state 1

    (0) S' -> statement .



state 2

    (1) statement -> FORMAT_HEX . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 12
    number                         shift and go to state 8

state 3

    (4) statement -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 4

    (2) statement -> FORMAT_BIN . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 18
    number                         shift and go to state 8

state 5

    (3) statement -> ID . EQUALS expression
    (15) expression -> ID .

    EQUALS          shift and go to state 19
    PLUS            reduce using rule 15 (expression -> ID .)
    MINUS           reduce using rule 15 (expression -> ID .)
    TIMES           reduce using rule 15 (expression -> ID .)
    DIVIDE          reduce using rule 15 (expression -> ID .)
    $end            reduce using rule 15 (expression -> ID .)


state 6

    (9) expression -> MINUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 20
    number                         shift and go to state 8

state 7

    (10) expression -> LPAREN . expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 21
    number                         shift and go to state 8

state 8

    (14) expression -> number .

    PLUS            reduce using rule 14 (expression -> number .)
    MINUS           reduce using rule 14 (expression -> number .)
    TIMES           reduce using rule 14 (expression -> number .)
    DIVIDE          reduce using rule 14 (expression -> number .)
    $end            reduce using rule 14 (expression -> number .)
    RPAREN          reduce using rule 14 (expression -> number .)


state 9

    (11) number -> DEC .

    PLUS            reduce using rule 11 (number -> DEC .)
    MINUS           reduce using rule 11 (number -> DEC .)
    TIMES           reduce using rule 11 (number -> DEC .)
    DIVIDE          reduce using rule 11 (number -> DEC .)
    $end            reduce using rule 11 (number -> DEC .)
    RPAREN          reduce using rule 11 (number -> DEC .)


state 10

    (12) number -> HEX .

    PLUS            reduce using rule 12 (number -> HEX .)
    MINUS           reduce using rule 12 (number -> HEX .)
    TIMES           reduce using rule 12 (number -> HEX .)
    DIVIDE          reduce using rule 12 (number -> HEX .)
    $end            reduce using rule 12 (number -> HEX .)
    RPAREN          reduce using rule 12 (number -> HEX .)


state 11

    (13) number -> BIN .

    PLUS            reduce using rule 13 (number -> BIN .)
    MINUS           reduce using rule 13 (number -> BIN .)
    TIMES           reduce using rule 13 (number -> BIN .)
    DIVIDE          reduce using rule 13 (number -> BIN .)
    $end            reduce using rule 13 (number -> BIN .)
    RPAREN          reduce using rule 13 (number -> BIN .)


state 12

    (1) statement -> FORMAT_HEX expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> FORMAT_HEX expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 13

    (15) expression -> ID .

    PLUS            reduce using rule 15 (expression -> ID .)
    MINUS           reduce using rule 15 (expression -> ID .)
    TIMES           reduce using rule 15 (expression -> ID .)
    DIVIDE          reduce using rule 15 (expression -> ID .)
    $end            reduce using rule 15 (expression -> ID .)
    RPAREN          reduce using rule 15 (expression -> ID .)


state 14

    (5) expression -> expression PLUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 22
    number                         shift and go to state 8

state 15

    (6) expression -> expression MINUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 23
    number                         shift and go to state 8

state 16

    (7) expression -> expression TIMES . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 24
    number                         shift and go to state 8

state 17

    (8) expression -> expression DIVIDE . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 25
    number                         shift and go to state 8

state 18

    (2) statement -> FORMAT_BIN expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    $end            reduce using rule 2 (statement -> FORMAT_BIN expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 19

    (3) statement -> ID EQUALS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . MINUS expression
    (10) expression -> . LPAREN expression RPAREN
    (14) expression -> . number
    (15) expression -> . ID
    (11) number -> . DEC
    (12) number -> . HEX
    (13) number -> . BIN

    MINUS           shift and go to state 6
    LPAREN          shift and go to state 7
    ID              shift and go to state 13
    DEC             shift and go to state 9
    HEX             shift and go to state 10
    BIN             shift and go to state 11

    expression                     shift and go to state 26
    number                         shift and go to state 8

state 20

    (9) expression -> MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> MINUS expression .)
    MINUS           reduce using rule 9 (expression -> MINUS expression .)
    TIMES           reduce using rule 9 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 9 (expression -> MINUS expression .)
    $end            reduce using rule 9 (expression -> MINUS expression .)
    RPAREN          reduce using rule 9 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 21

    (10) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 27
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 22

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17

  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 23

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17

  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 24

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 7 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 7 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 25

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 26

    (3) statement -> ID EQUALS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression

    $end            reduce using rule 3 (statement -> ID EQUALS expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 27

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)

